// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gfs.proto

#include "../headers/gfs.pb.h"
#include "../headers/gfs.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gfs {

static const char* MasterServerToClient_method_names[] = {
  "/gfs.MasterServerToClient/ListFiles",
  "/gfs.MasterServerToClient/CreateFile",
  "/gfs.MasterServerToClient/AppendFile",
  "/gfs.MasterServerToClient/CreateChunk",
  "/gfs.MasterServerToClient/ReadFile",
  "/gfs.MasterServerToClient/WriteFile",
  "/gfs.MasterServerToClient/DeleteFile",
  "/gfs.MasterServerToClient/UndeleteFile",
};

std::unique_ptr< MasterServerToClient::Stub> MasterServerToClient::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MasterServerToClient::Stub> stub(new MasterServerToClient::Stub(channel));
  return stub;
}

MasterServerToClient::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListFiles_(MasterServerToClient_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateFile_(MasterServerToClient_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AppendFile_(MasterServerToClient_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChunk_(MasterServerToClient_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadFile_(MasterServerToClient_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteFile_(MasterServerToClient_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFile_(MasterServerToClient_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UndeleteFile_(MasterServerToClient_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MasterServerToClient::Stub::ListFiles(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListFiles_, context, request, response);
}

void MasterServerToClient::Stub::experimental_async::ListFiles(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, std::move(f));
}

void MasterServerToClient::Stub::experimental_async::ListFiles(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::AsyncListFilesRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MasterServerToClient::Stub::CreateFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateFile_, context, request, response);
}

void MasterServerToClient::Stub::experimental_async::CreateFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, std::move(f));
}

void MasterServerToClient::Stub::experimental_async::CreateFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::AsyncCreateFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MasterServerToClient::Stub::AppendFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendFile_, context, request, response);
}

void MasterServerToClient::Stub::experimental_async::AppendFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendFile_, context, request, response, std::move(f));
}

void MasterServerToClient::Stub::experimental_async::AppendFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::PrepareAsyncAppendFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::AsyncAppendFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MasterServerToClient::Stub::CreateChunk(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChunk_, context, request, response);
}

void MasterServerToClient::Stub::experimental_async::CreateChunk(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChunk_, context, request, response, std::move(f));
}

void MasterServerToClient::Stub::experimental_async::CreateChunk(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::PrepareAsyncCreateChunkRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::AsyncCreateChunkRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MasterServerToClient::Stub::ReadFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadFile_, context, request, response);
}

void MasterServerToClient::Stub::experimental_async::ReadFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadFile_, context, request, response, std::move(f));
}

void MasterServerToClient::Stub::experimental_async::ReadFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::AsyncReadFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MasterServerToClient::Stub::WriteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteFile_, context, request, response);
}

void MasterServerToClient::Stub::experimental_async::WriteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteFile_, context, request, response, std::move(f));
}

void MasterServerToClient::Stub::experimental_async::WriteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::AsyncWriteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MasterServerToClient::Stub::DeleteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteFile_, context, request, response);
}

void MasterServerToClient::Stub::experimental_async::DeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, std::move(f));
}

void MasterServerToClient::Stub::experimental_async::DeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MasterServerToClient::Stub::UndeleteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UndeleteFile_, context, request, response);
}

void MasterServerToClient::Stub::experimental_async::UndeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UndeleteFile_, context, request, response, std::move(f));
}

void MasterServerToClient::Stub::experimental_async::UndeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UndeleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::PrepareAsyncUndeleteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UndeleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* MasterServerToClient::Stub::AsyncUndeleteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUndeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

MasterServerToClient::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterServerToClient_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->ListFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterServerToClient_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->CreateFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterServerToClient_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->AppendFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterServerToClient_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->CreateChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterServerToClient_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->ReadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterServerToClient_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->WriteFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterServerToClient_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->DeleteFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterServerToClient_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->UndeleteFile(ctx, req, resp);
             }, this)));
}

MasterServerToClient::Service::~Service() {
}

::grpc::Status MasterServerToClient::Service::ListFiles(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterServerToClient::Service::CreateFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterServerToClient::Service::AppendFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterServerToClient::Service::CreateChunk(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterServerToClient::Service::ReadFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterServerToClient::Service::WriteFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterServerToClient::Service::DeleteFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterServerToClient::Service::UndeleteFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ChunkServerToClient_method_names[] = {
  "/gfs.ChunkServerToClient/Create",
  "/gfs.ChunkServerToClient/GetChunkSpace",
  "/gfs.ChunkServerToClient/Write",
  "/gfs.ChunkServerToClient/Append",
  "/gfs.ChunkServerToClient/Read",
};

std::unique_ptr< ChunkServerToClient::Stub> ChunkServerToClient::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChunkServerToClient::Stub> stub(new ChunkServerToClient::Stub(channel));
  return stub;
}

ChunkServerToClient::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(ChunkServerToClient_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChunkSpace_(ChunkServerToClient_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Write_(ChunkServerToClient_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Append_(ChunkServerToClient_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(ChunkServerToClient_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChunkServerToClient::Stub::Create(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void ChunkServerToClient::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void ChunkServerToClient::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChunkServerToClient::Stub::GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChunkSpace_, context, request, response);
}

void ChunkServerToClient::Stub::experimental_async::GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChunkSpace_, context, request, response, std::move(f));
}

void ChunkServerToClient::Stub::experimental_async::GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChunkSpace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::PrepareAsyncGetChunkSpaceRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChunkSpace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::AsyncGetChunkSpaceRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChunkSpaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChunkServerToClient::Stub::Write(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Write_, context, request, response);
}

void ChunkServerToClient::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void ChunkServerToClient::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Write_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChunkServerToClient::Stub::Append(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Append_, context, request, response);
}

void ChunkServerToClient::Stub::experimental_async::Append(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Append_, context, request, response, std::move(f));
}

void ChunkServerToClient::Stub::experimental_async::Append(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Append_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::PrepareAsyncAppendRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Append_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::AsyncAppendRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChunkServerToClient::Stub::Read(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Read_, context, request, response);
}

void ChunkServerToClient::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

void ChunkServerToClient::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gfs::Reply, ::gfs::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Read_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gfs::Reply>* ChunkServerToClient::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChunkServerToClient::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerToClient_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChunkServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerToClient_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChunkServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->GetChunkSpace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerToClient_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChunkServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->Write(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerToClient_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChunkServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->Append(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerToClient_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerToClient::Service, ::gfs::Request, ::gfs::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChunkServerToClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gfs::Request* req,
             ::gfs::Reply* resp) {
               return service->Read(ctx, req, resp);
             }, this)));
}

ChunkServerToClient::Service::~Service() {
}

::grpc::Status ChunkServerToClient::Service::Create(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServerToClient::Service::GetChunkSpace(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServerToClient::Service::Write(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServerToClient::Service::Append(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServerToClient::Service::Read(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gfs

