// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gfs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gfs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gfs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gfs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gfs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gfs_2eproto;
namespace gfs {
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace gfs
PROTOBUF_NAMESPACE_OPEN
template<> ::gfs::Reply* Arena::CreateMaybeMessage<::gfs::Reply>(Arena*);
template<> ::gfs::Request* Arena::CreateMaybeMessage<::gfs::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gfs {

// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gfs.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gfs.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gfs_2eproto);
    return ::descriptor_table_gfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendMessageFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // string send_message = 1;
  void clear_send_message();
  const std::string& send_message() const;
  void set_send_message(const std::string& value);
  void set_send_message(std::string&& value);
  void set_send_message(const char* value);
  void set_send_message(const char* value, size_t size);
  std::string* mutable_send_message();
  std::string* release_send_message();
  void set_allocated_send_message(std::string* send_message);
  private:
  const std::string& _internal_send_message() const;
  void _internal_set_send_message(const std::string& value);
  std::string* _internal_mutable_send_message();
  public:

  // string status_code = 2;
  void clear_status_code();
  const std::string& status_code() const;
  void set_status_code(const std::string& value);
  void set_status_code(std::string&& value);
  void set_status_code(const char* value);
  void set_status_code(const char* value, size_t size);
  std::string* mutable_status_code();
  std::string* release_status_code();
  void set_allocated_status_code(std::string* status_code);
  private:
  const std::string& _internal_status_code() const;
  void _internal_set_status_code(const std::string& value);
  std::string* _internal_mutable_status_code();
  public:

  // @@protoc_insertion_point(class_scope:gfs.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gfs_2eproto;
};
// -------------------------------------------------------------------

class Reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gfs.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gfs.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gfs_2eproto);
    return ::descriptor_table_gfs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyMessageFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // string reply_message = 1;
  void clear_reply_message();
  const std::string& reply_message() const;
  void set_reply_message(const std::string& value);
  void set_reply_message(std::string&& value);
  void set_reply_message(const char* value);
  void set_reply_message(const char* value, size_t size);
  std::string* mutable_reply_message();
  std::string* release_reply_message();
  void set_allocated_reply_message(std::string* reply_message);
  private:
  const std::string& _internal_reply_message() const;
  void _internal_set_reply_message(const std::string& value);
  std::string* _internal_mutable_reply_message();
  public:

  // string status_code = 2;
  void clear_status_code();
  const std::string& status_code() const;
  void set_status_code(const std::string& value);
  void set_status_code(std::string&& value);
  void set_status_code(const char* value);
  void set_status_code(const char* value, size_t size);
  std::string* mutable_status_code();
  std::string* release_status_code();
  void set_allocated_status_code(std::string* status_code);
  private:
  const std::string& _internal_status_code() const;
  void _internal_set_status_code(const std::string& value);
  std::string* _internal_mutable_status_code();
  public:

  // @@protoc_insertion_point(class_scope:gfs.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gfs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string send_message = 1;
inline void Request::clear_send_message() {
  send_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::send_message() const {
  // @@protoc_insertion_point(field_get:gfs.Request.send_message)
  return _internal_send_message();
}
inline void Request::set_send_message(const std::string& value) {
  _internal_set_send_message(value);
  // @@protoc_insertion_point(field_set:gfs.Request.send_message)
}
inline std::string* Request::mutable_send_message() {
  // @@protoc_insertion_point(field_mutable:gfs.Request.send_message)
  return _internal_mutable_send_message();
}
inline const std::string& Request::_internal_send_message() const {
  return send_message_.Get();
}
inline void Request::_internal_set_send_message(const std::string& value) {
  
  send_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_send_message(std::string&& value) {
  
  send_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gfs.Request.send_message)
}
inline void Request::set_send_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  send_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gfs.Request.send_message)
}
inline void Request::set_send_message(const char* value,
    size_t size) {
  
  send_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gfs.Request.send_message)
}
inline std::string* Request::_internal_mutable_send_message() {
  
  return send_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_send_message() {
  // @@protoc_insertion_point(field_release:gfs.Request.send_message)
  return send_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_send_message(std::string* send_message) {
  if (send_message != nullptr) {
    
  } else {
    
  }
  send_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), send_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gfs.Request.send_message)
}

// string status_code = 2;
inline void Request::clear_status_code() {
  status_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::status_code() const {
  // @@protoc_insertion_point(field_get:gfs.Request.status_code)
  return _internal_status_code();
}
inline void Request::set_status_code(const std::string& value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:gfs.Request.status_code)
}
inline std::string* Request::mutable_status_code() {
  // @@protoc_insertion_point(field_mutable:gfs.Request.status_code)
  return _internal_mutable_status_code();
}
inline const std::string& Request::_internal_status_code() const {
  return status_code_.Get();
}
inline void Request::_internal_set_status_code(const std::string& value) {
  
  status_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_status_code(std::string&& value) {
  
  status_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gfs.Request.status_code)
}
inline void Request::set_status_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gfs.Request.status_code)
}
inline void Request::set_status_code(const char* value,
    size_t size) {
  
  status_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gfs.Request.status_code)
}
inline std::string* Request::_internal_mutable_status_code() {
  
  return status_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_status_code() {
  // @@protoc_insertion_point(field_release:gfs.Request.status_code)
  return status_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_status_code(std::string* status_code) {
  if (status_code != nullptr) {
    
  } else {
    
  }
  status_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gfs.Request.status_code)
}

// -------------------------------------------------------------------

// Reply

// string reply_message = 1;
inline void Reply::clear_reply_message() {
  reply_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Reply::reply_message() const {
  // @@protoc_insertion_point(field_get:gfs.Reply.reply_message)
  return _internal_reply_message();
}
inline void Reply::set_reply_message(const std::string& value) {
  _internal_set_reply_message(value);
  // @@protoc_insertion_point(field_set:gfs.Reply.reply_message)
}
inline std::string* Reply::mutable_reply_message() {
  // @@protoc_insertion_point(field_mutable:gfs.Reply.reply_message)
  return _internal_mutable_reply_message();
}
inline const std::string& Reply::_internal_reply_message() const {
  return reply_message_.Get();
}
inline void Reply::_internal_set_reply_message(const std::string& value) {
  
  reply_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Reply::set_reply_message(std::string&& value) {
  
  reply_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gfs.Reply.reply_message)
}
inline void Reply::set_reply_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gfs.Reply.reply_message)
}
inline void Reply::set_reply_message(const char* value,
    size_t size) {
  
  reply_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gfs.Reply.reply_message)
}
inline std::string* Reply::_internal_mutable_reply_message() {
  
  return reply_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Reply::release_reply_message() {
  // @@protoc_insertion_point(field_release:gfs.Reply.reply_message)
  return reply_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reply::set_allocated_reply_message(std::string* reply_message) {
  if (reply_message != nullptr) {
    
  } else {
    
  }
  reply_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gfs.Reply.reply_message)
}

// string status_code = 2;
inline void Reply::clear_status_code() {
  status_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Reply::status_code() const {
  // @@protoc_insertion_point(field_get:gfs.Reply.status_code)
  return _internal_status_code();
}
inline void Reply::set_status_code(const std::string& value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:gfs.Reply.status_code)
}
inline std::string* Reply::mutable_status_code() {
  // @@protoc_insertion_point(field_mutable:gfs.Reply.status_code)
  return _internal_mutable_status_code();
}
inline const std::string& Reply::_internal_status_code() const {
  return status_code_.Get();
}
inline void Reply::_internal_set_status_code(const std::string& value) {
  
  status_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Reply::set_status_code(std::string&& value) {
  
  status_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gfs.Reply.status_code)
}
inline void Reply::set_status_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gfs.Reply.status_code)
}
inline void Reply::set_status_code(const char* value,
    size_t size) {
  
  status_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gfs.Reply.status_code)
}
inline std::string* Reply::_internal_mutable_status_code() {
  
  return status_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Reply::release_status_code() {
  // @@protoc_insertion_point(field_release:gfs.Reply.status_code)
  return status_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reply::set_allocated_status_code(std::string* status_code) {
  if (status_code != nullptr) {
    
  } else {
    
  }
  status_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gfs.Reply.status_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gfs_2eproto
