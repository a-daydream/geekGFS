// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gfs.proto
#ifndef GRPC_gfs_2eproto__INCLUDED
#define GRPC_gfs_2eproto__INCLUDED

#include "gfs.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gfs {

class MasterServerToClient final {
 public:
  static constexpr char const* service_full_name() {
    return "gfs.MasterServerToClient";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListFiles(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncListFiles(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncListFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncListFiles(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncListFilesRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncCreateFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    virtual ::grpc::Status AppendFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncAppendFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncAppendFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncAppendFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncAppendFileRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateChunk(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncCreateChunk(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncCreateChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncCreateChunk(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncCreateChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncReadFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncReadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncWriteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncWriteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncWriteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncWriteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncDeleteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListFiles(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListFiles(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListFiles(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AppendFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AppendFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AppendFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateChunk(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateChunk(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateChunk(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReadFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReadFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReadFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void WriteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WriteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WriteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncListFilesRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncAppendFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncAppendFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncCreateChunkRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncCreateChunkRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListFiles(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncListFiles(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncListFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncListFiles(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncListFilesRaw(context, request, cq));
    }
    ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncCreateFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    ::grpc::Status AppendFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncAppendFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncAppendFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncAppendFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncAppendFileRaw(context, request, cq));
    }
    ::grpc::Status CreateChunk(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncCreateChunk(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncCreateChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncCreateChunk(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncCreateChunkRaw(context, request, cq));
    }
    ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncReadFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncReadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncWriteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncWriteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncWriteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncWriteFileRaw(context, request, cq));
    }
    ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncDeleteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListFiles(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListFiles(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListFiles(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AppendFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AppendFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AppendFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateChunk(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateChunk(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateChunk(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReadFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReadFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReadFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void WriteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WriteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WriteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteFile(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncListFilesRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncAppendFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncAppendFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncCreateChunkRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncCreateChunkRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFile_;
    const ::grpc::internal::RpcMethod rpcmethod_AppendFile_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status CreateFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status AppendFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status CreateChunk(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status ReadFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status WriteFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status DeleteFile(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListFiles() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFiles(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendFile(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateChunk() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChunk(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChunk(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadFile() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteFile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteFile(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFile() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListFiles<WithAsyncMethod_CreateFile<WithAsyncMethod_AppendFile<WithAsyncMethod_CreateChunk<WithAsyncMethod_ReadFile<WithAsyncMethod_WriteFile<WithAsyncMethod_DeleteFile<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListFiles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->ListFiles(context, request, response); }));}
    void SetMessageAllocatorFor_ListFiles(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListFiles(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->CreateFile(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFile(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AppendFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->AppendFile(context, request, response); }));}
    void SetMessageAllocatorFor_AppendFile(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AppendFile(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AppendFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateChunk() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->CreateChunk(context, request, response); }));}
    void SetMessageAllocatorFor_CreateChunk(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChunk(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateChunk(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReadFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->ReadFile(context, request, response); }));}
    void SetMessageAllocatorFor_ReadFile(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReadFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WriteFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->WriteFile(context, request, response); }));}
    void SetMessageAllocatorFor_WriteFile(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WriteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WriteFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->DeleteFile(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFile(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListFiles<ExperimentalWithCallbackMethod_CreateFile<ExperimentalWithCallbackMethod_AppendFile<ExperimentalWithCallbackMethod_CreateChunk<ExperimentalWithCallbackMethod_ReadFile<ExperimentalWithCallbackMethod_WriteFile<ExperimentalWithCallbackMethod_DeleteFile<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListFiles<ExperimentalWithCallbackMethod_CreateFile<ExperimentalWithCallbackMethod_AppendFile<ExperimentalWithCallbackMethod_CreateChunk<ExperimentalWithCallbackMethod_ReadFile<ExperimentalWithCallbackMethod_WriteFile<ExperimentalWithCallbackMethod_DeleteFile<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListFiles() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateChunk() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChunk(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadFile() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteFile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFile() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListFiles() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateChunk() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChunk(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadFile() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteFile() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListFiles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListFiles(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListFiles(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AppendFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppendFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AppendFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AppendFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateChunk() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateChunk(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChunk(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateChunk(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReadFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WriteFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WriteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WriteFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListFiles() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedListFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedCreateFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppendFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedAppendFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppendFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateChunk() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedCreateChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateChunk(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadFile() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedReadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteFile() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedWriteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFile() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedDeleteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListFiles<WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_AppendFile<WithStreamedUnaryMethod_CreateChunk<WithStreamedUnaryMethod_ReadFile<WithStreamedUnaryMethod_WriteFile<WithStreamedUnaryMethod_DeleteFile<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListFiles<WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_AppendFile<WithStreamedUnaryMethod_CreateChunk<WithStreamedUnaryMethod_ReadFile<WithStreamedUnaryMethod_WriteFile<WithStreamedUnaryMethod_DeleteFile<Service > > > > > > > StreamedService;
};

class ChunkServerToClient final {
 public:
  static constexpr char const* service_full_name() {
    return "gfs.ChunkServerToClient";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncCreate(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncGetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncGetChunkSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncGetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncGetChunkSpaceRaw(context, request, cq));
    }
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncWrite(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status Append(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncAppend(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncAppendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncAppend(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncAppendRaw(context, request, cq));
    }
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> AsyncRead(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>> PrepareAsyncRead(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>>(PrepareAsyncReadRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Create(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Write(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Write(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Write(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Append(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Append(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Append(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Read(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncCreateRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncGetChunkSpaceRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncGetChunkSpaceRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncAppendRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncAppendRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* AsyncReadRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gfs::Reply>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncCreate(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncGetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncGetChunkSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncGetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncGetChunkSpaceRaw(context, request, cq));
    }
    ::grpc::Status Write(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncWrite(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    ::grpc::Status Append(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncAppend(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncAppendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncAppend(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncAppendRaw(context, request, cq));
    }
    ::grpc::Status Read(::grpc::ClientContext* context, const ::gfs::Request& request, ::gfs::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> AsyncRead(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>> PrepareAsyncRead(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gfs::Reply>>(PrepareAsyncReadRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetChunkSpace(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Write(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Write(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Write(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Append(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Append(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Append(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Read(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, const ::gfs::Request* request, ::gfs::Reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncCreateRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncGetChunkSpaceRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncGetChunkSpaceRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncAppendRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncAppendRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* AsyncReadRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gfs::Reply>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::gfs::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChunkSpace_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Append_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status GetChunkSpace(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status Append(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::gfs::Request* request, ::gfs::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChunkSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChunkSpace() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetChunkSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChunkSpace(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChunkSpace(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Append() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppend(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::gfs::Request* request, ::grpc::ServerAsyncResponseWriter< ::gfs::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_GetChunkSpace<WithAsyncMethod_Write<WithAsyncMethod_Append<WithAsyncMethod_Read<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetChunkSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetChunkSpace() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->GetChunkSpace(context, request, response); }));}
    void SetMessageAllocatorFor_GetChunkSpace(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetChunkSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChunkSpace(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetChunkSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetChunkSpace(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->Write(context, request, response); }));}
    void SetMessageAllocatorFor_Write(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Append() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->Append(context, request, response); }));}
    void SetMessageAllocatorFor_Append(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Append(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Append(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gfs::Request* request, ::gfs::Reply* response) { return this->Read(context, request, response); }));}
    void SetMessageAllocatorFor_Read(
        ::grpc::experimental::MessageAllocator< ::gfs::Request, ::gfs::Reply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gfs::Request, ::gfs::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_GetChunkSpace<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Append<ExperimentalWithCallbackMethod_Read<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_GetChunkSpace<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Append<ExperimentalWithCallbackMethod_Read<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChunkSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChunkSpace() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetChunkSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChunkSpace(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Append() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChunkSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChunkSpace() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetChunkSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChunkSpace(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChunkSpace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Append() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetChunkSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetChunkSpace() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChunkSpace(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetChunkSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChunkSpace(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetChunkSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetChunkSpace(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Write(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Append() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Append(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Append(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Append(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Read(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChunkSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChunkSpace() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedGetChunkSpace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChunkSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChunkSpace(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChunkSpace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Append() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedAppend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gfs::Request, ::gfs::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gfs::Request, ::gfs::Reply>* streamer) {
                       return this->StreamedRead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::gfs::Request* /*request*/, ::gfs::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gfs::Request,::gfs::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_GetChunkSpace<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Append<WithStreamedUnaryMethod_Read<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_GetChunkSpace<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Append<WithStreamedUnaryMethod_Read<Service > > > > > StreamedService;
};

}  // namespace gfs


#endif  // GRPC_gfs_2eproto__INCLUDED
